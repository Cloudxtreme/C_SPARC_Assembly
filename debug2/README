/*
 * Filename: README (debug2)
 * Author: Moiz Qureshi
 * Userid: cs30xix
 * Date: 02/19/16
 * Sources of help: gdb --help, git --help, CSE30 Useful Links (R_SPARC_13 err)
 */

Compilation Errors (3):
-----------------------

1)  The first compilation error was found when running make for the first time.
    The output of this make command can be seen below:
    __________________________________________________________________________
   
    cs30xix@ieng9]:debug2:501$ make
    Linting each C source file separately ...
    lint -c -err=warn main.c
    (60) error: undefined symbol: numOfChars
    (60) error: variable may be used before set: numOfChars
    lint: errors in main.c; no output created
    *** Error code 2
    make: Fatal error: Command failed for target `main.o'
    __________________________________________________________________________

    The integer variable numOfChars is defined in the file count.c outside of 
    the count() function. However, it is being used in main.c, there was no 
    external declaration given to the numOfChars variable. To fix this, the 
    following code was added on line 28 of main.c outside of main():

    	extern int numOfChars;

    This tells the compiler to find the declaration of numOfchars outside of 
    main.c.
   
2) After fixing the first compilation error, the second compilation error was
   found when running the make command again. The output of this make command
   can be seen below:
   __________________________________________________________________________
   
   [cs30xix@ieng9]:debug2:503$ make
   Linting each C source file separately ...
   lint -c -err=warn main.c
   
   Compiling each C source file separately ...
   gcc -c -g -Wall -D__EXTENSIONS__ -std=c99 main.c
   
   Linting each C source file separately ...
   lint -c -err=warn count.c
   (28) error: implicit function declaration: strlen
   (35) error: function returns pointer to automatic
   lint: errors in count.c; no output created
   *** Error code 2
   make: Fatal error: Command failed for target `count.o'_
   ___________________________________________________________________________

   The second error noted is on line 28 of count.c where there is an implicit
   fucntion declaration for strlen. This means that the the proper header file
   was not included using the preprocessor directive. This problem was fixed by
   adding the following code to line 7 of count.c:

   	#include <string.h>

   By including the string.h header file, we now have the proper function
   decalration for the strlen() function and it can be used. 

3) After fixing the second compilation error, the third compilation error was
   found when running the make command again. The output of this make command 
   can be seen below:
   __________________________________________________________________________

   [cs30xix@ieng9]:debug2:505$ make
   Linting each C source file separately ...
   lint -c -err=warn count.c
   (36) error: function returns pointer to automatic
   lint: errors in count.c; no output created
   *** Error code 2
   make: Fatal error: Command failed for target `count.o'
   __________________________________________________________________________
   
   The third error is noted on line 25 of count.c. We are defining the variable
   int asctb[] inside of the count() function, therefore it only has local 
   scope limited to this function only. So this variable is placed on the stack
   whenver the function is called and is automatically destroyed at the end of 
   the function. To fix the compilation error, I modified line 25 of count.c to
   be the following:

   	static int asctb[ASCII] = {0};

   By adding the static modifier to this variable, it will no longer be 
   allocated on the stack (as it was originally), but rather the Data section 
   since it is an initialized static variable. This will allow this variable to
   retain its value after each function call and not be destroyed at the end of 
   each count() function call. 
   
 
Runtime & Functionality Errors (6):
-----------------------------------

1) After fixing the compilation errors, compiling, and running the program,
   I noticed that the program was not printing any of the characters of the 
   string "doge" I inputted as the argument into the program. So after 
   inspecting main.c with VDB, I noticed that the for loop starting at line 
   52 of main.c had an incorrect condition only iterating four times, which is 
   the size, in number of bytes, of a pointer (counts variable). This is 
   incorrect, since the return integer array from the function count() has a 
   size of 256, which is the globally defined variable ASCII. This problem was
   fixed by changing the condition, so that j is less than ASCII. The code on 
   line 52 of main.c is now the following:
   
   	for(j = 0; j < ASCII; j++) {
   
   Now the for loop will iterate through all the elements of the integer array,
   as it should, since the array has a size 256 elements where each element is 
   representing an ASCII character, and each element holding the value of the 
   count of each ASCII character (of the string the user inputted).

2) After fixing the previous functionality error described above, I recompiled
   the program, and ran it again with the same string input of "doge". The 
   program is now working, however, the output is not identical to the 
   reference output as showin in PAMT2/Debug 2 Assignment sheet. The program is
   currently printing how many times each ASCII character appears in the string
   "doge" for all 256 ASCII characters, where as the refernece only prints how
   many times a character appears in input string, only for the characters in
   the input string. Upon further inspection with VDB, I noticed that the if
   condition on line 53 of main.c is missing brackets (which are required 
   because the next two lines must execute if and only if the if conditional is
   met). So the program is is always executing the two print calls on line 54
   and line 55. This was easily fixed by adding brackets so now the code from
   lines 53 to 57 looks like the following:

   	if (counts[j]) {
	  (void) printf("Character %c ", j);
	  (void) printf("appeared %d times\n", counts[j]);
	  numOfUniqueChars++;
	}

   Now the program will only print how many times a character appeared only for
   the ASCII characters present in the user-inputted string.

